//
// *******************************************************************************
// * Copyright (C)2014, International Business Machines Corporation and *
// * others. All Rights Reserved. *
// *******************************************************************************
//
namespace com.ibm.streamsx.json.tests;

composite BasicTest {


	type
		MyType = rstring name, rstring value, int32 age;

	graph
		stream<MyType> InputS = Beacon() {
		param
			iterations : 1u;
		output InputS : name = "name", value="value", age=10;
		}
		() as SinkOp = Verifier(InputS) {}
	config 
	  tracing : debug;
}

composite ListTest {


	type
		MyType = list<rstring> a, list<int64> b, set<float64> c;

	graph
		stream<MyType> InputS = Beacon() {
		param
			iterations : 1u;
		output InputS : a=[ "a", "b", "c"] , b=[1l,2l,3l], c={1.2, 2.2,3.5};
		}
		() as SinkOp = Verifier(InputS) {}
	config 
		tracing : debug;
		
}

//special case where lists and sets are embedded
composite SetOfListTest {


	type
		MyType = list<rstring> a, set<list<int64>> b, list<set<float64>> c, list<list<rstring>> d , set<set<float64>> e;

	graph
		stream<MyType> InputS = Beacon() {
		param
			iterations : 1u;
		output InputS : a=[ "a", "b", "c"] , b={[1l,2l,3l]}, c=[{1.2, 2.2,3.5}], d=[["a", "b", "c"]], e={{1.2,3.4}};
		}
		() as SinkOp = Verifier(InputS) {}
	config 
		tracing : debug;
		
}

//all null values in lists should be ignored
//rstring null value should be empty
composite NullBasicTest {


	type
		MyType = rstring a, list<rstring> b, set<rstring> c;

	graph
		stream<MyType> ExpectedS = Beacon() {
		param
			iterations : 1u;
		output ExpectedS : a="", b=["a","c"];
		}
		stream<rstring jsonString> JsonS = Beacon() {
		param
			iterations : 1u;
		output JsonS : jsonString = "{\"b\" : [\"a\", null, \"c\", null ]}";
		}
		() as SinkOp = VerifierJTOT(JsonS; ExpectedS) {}
	config 
		tracing : debug;
		
}

composite MapBasicTest {
	type
		InlineType = tuple<rstring x, int32 y>;
		MyType = map<rstring, rstring> a, map<rstring, InlineType> b ;
		
	graph
		stream<MyType> ExpectedS = Beacon() {
			param
				iterations : 1u;
			output ExpectedS : a={"key1" : "testing"}, b={"key2" : {x = "testing", y = 42}};
		}
		stream<rstring jsonString> JsonS = Beacon() {
			param
				iterations : 1u;
			output JsonS : jsonString = "{\"a\" : {\"key1\" : \"testing\"}, \"b\" : {\"key2\" : {\"x\" : \"testing\", \"y\" : 42}}}";
		}
		() as SinkOp = VerifierJTOT(JsonS; ExpectedS) {}
}

composite ListOfMapsTest {
	type
		MyType = list<map<rstring, rstring>> a;		
	graph
		stream<MyType> ExpectedS = Beacon() {
			param
				iterations : 1u;
			output ExpectedS : a=[{"key1" : "testing"}, {"key2" : "testing2"}];
		}
		stream<rstring jsonString> JsonS = Beacon() {
			param
				iterations : 1u;
			output JsonS : jsonString = "{\"a\" : [{\"key1\" : \"testing\"}, {\"key2\" : \"testing2\"}]}";
		}
		() as SinkOp = VerifierJTOT(JsonS; ExpectedS) {}
}